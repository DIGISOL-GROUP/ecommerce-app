{"ast":null,"code":"import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';const initialState={orders:[],loading:false,error:null};export const fetchOrders=createAsyncThunk('orders/fetchOrders',async()=>{const response=await fetch('/api/orders');return await response.json();});const ordersSlice=createSlice({name:'orders',initialState,reducers:{createOrder(state,action){state.orders.push(action.payload);}},extraReducers:builder=>{builder.addCase(fetchOrders.pending,state=>{state.loading=true;state.error=null;}).addCase(fetchOrders.fulfilled,(state,action)=>{state.loading=false;state.orders=action.payload;}).addCase(fetchOrders.rejected,(state,action)=>{state.loading=false;state.error=typeof action.payload==='string'?action.payload:'Failed to fetch orders';});}});export const{createOrder}=ordersSlice.actions;export default ordersSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","orders","loading","error","fetchOrders","response","fetch","json","ordersSlice","name","reducers","createOrder","state","action","push","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","actions","reducer"],"sources":["C:/Users/balga/OneDrive/Desktop/E-Commerce app/ecommerce-app/src/features/orders/ordersSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from '@reduxjs/toolkit';\n\ninterface Order {\n  order_id: string;\n  cart_id: string;\n  user_id: number;\n  status: string;\n  payment_id: string;\n  shipping_id: string;\n  total_xaf: number;\n  created_at: string;\n}\n\ninterface OrdersState {\n  orders: Order[];\n  loading: boolean;\n  error: string | null;\n}\n\nconst initialState: OrdersState = {\n  orders: [],\n  loading: false,\n  error: null,\n};\n\nexport const fetchOrders = createAsyncThunk('orders/fetchOrders', async () => {\n  const response = await fetch('/api/orders');\n  return (await response.json()) as Order[];\n});\n\nconst ordersSlice = createSlice({\n  name: 'orders',\n  initialState,\n  reducers: {\n    createOrder(state, action: PayloadAction<Order>) {\n      state.orders.push(action.payload);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchOrders.pending, (state) => {\n        state.loading = true;\n        state.error = null;\n      })\n      .addCase(fetchOrders.fulfilled, (state, action: PayloadAction<Order[]>) => {\n        state.loading = false;\n        state.orders = action.payload;\n      })\n      .addCase(fetchOrders.rejected, (state, action) => {\n        state.loading = false;\n        state.error = typeof action.payload === 'string' ? action.payload : 'Failed to fetch orders';\n      });\n  },\n});\n\nexport const { createOrder } = ordersSlice.actions;\n\nexport default ordersSlice.reducer;"],"mappings":"AAAA,OAASA,WAAW,CAAiBC,gBAAgB,KAAQ,kBAAkB,CAmB/E,KAAM,CAAAC,YAAyB,CAAG,CAChCC,MAAM,CAAE,EAAE,CACVC,OAAO,CAAE,KAAK,CACdC,KAAK,CAAE,IACT,CAAC,CAED,MAAO,MAAM,CAAAC,WAAW,CAAGL,gBAAgB,CAAC,oBAAoB,CAAE,SAAY,CAC5E,KAAM,CAAAM,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,aAAa,CAAC,CAC3C,MAAQ,MAAM,CAAAD,QAAQ,CAACE,IAAI,CAAC,CAAC,CAC/B,CAAC,CAAC,CAEF,KAAM,CAAAC,WAAW,CAAGV,WAAW,CAAC,CAC9BW,IAAI,CAAE,QAAQ,CACdT,YAAY,CACZU,QAAQ,CAAE,CACRC,WAAWA,CAACC,KAAK,CAAEC,MAA4B,CAAE,CAC/CD,KAAK,CAACX,MAAM,CAACa,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC,CACnC,CACF,CAAC,CACDC,aAAa,CAAGC,OAAO,EAAK,CAC1BA,OAAO,CACJC,OAAO,CAACd,WAAW,CAACe,OAAO,CAAGP,KAAK,EAAK,CACvCA,KAAK,CAACV,OAAO,CAAG,IAAI,CACpBU,KAAK,CAACT,KAAK,CAAG,IAAI,CACpB,CAAC,CAAC,CACDe,OAAO,CAACd,WAAW,CAACgB,SAAS,CAAE,CAACR,KAAK,CAAEC,MAA8B,GAAK,CACzED,KAAK,CAACV,OAAO,CAAG,KAAK,CACrBU,KAAK,CAACX,MAAM,CAAGY,MAAM,CAACE,OAAO,CAC/B,CAAC,CAAC,CACDG,OAAO,CAACd,WAAW,CAACiB,QAAQ,CAAE,CAACT,KAAK,CAAEC,MAAM,GAAK,CAChDD,KAAK,CAACV,OAAO,CAAG,KAAK,CACrBU,KAAK,CAACT,KAAK,CAAG,MAAO,CAAAU,MAAM,CAACE,OAAO,GAAK,QAAQ,CAAGF,MAAM,CAACE,OAAO,CAAG,wBAAwB,CAC9F,CAAC,CAAC,CACN,CACF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAEJ,WAAY,CAAC,CAAGH,WAAW,CAACc,OAAO,CAElD,cAAe,CAAAd,WAAW,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}